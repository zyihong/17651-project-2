// 2 Lines Pump System
// Designers: Harsh Varshney
//			  Siddhant Mishra
//			  Yao Yu
//			  Yihong Zou
//			  Zixin Ye


/** power system **/

// Switch status
const SwitchOff = 0		// system pwoer on
const SwitchOn = 1		// system power off
range SwitchStatus = SwitchOff .. SwitchOn

// Power mode
const Battery = 0		// system using battery
const AC = 1			// system using AC charger
range PowerMode = Battery .. AC

// Battery level
const Empty = 0			// Battery empty
const Low = 2			// Battery level less than 2 is low (e.g. 1)
const Full = 5    		// jBattery full
range BatteryLevel = Empty .. Full

// Power system model
POWER_SYSTEM = POWER[Battery][SwitchOff][Full],
POWER[b: PowerMode][s: SwitchStatus][l: BatteryLevel] = (
		// turn on the system
		when (s == SwitchOff && (b == Battery && l > Empty || b == AC)) power_on -> POWER[b][SwitchOn][l]
		|	// turn off the system
		when (s == SwitchOn) power_off -> POWER[b][SwitchOff][l]
		|	// plug in the charger to use AC mode
		when (b == Battery) plug_in -> POWER[AC][s][l]
		|	// plug out the charger to use battery
		when (b == AC) plug_out -> POWER[Battery][s][l]
		|	// battery still has enough power
		when (b == Battery && l > Low && s == SwitchOn) discharge -> POWER[Battery][s][l - 1]
		|	// battery will reduce to low power
		when (b == Battery && l == Low && s == SwitchOn) discharge_low -> POWER[Battery][s][l - 1]
		|	// battery will reduce to empty
		when (b == Battery && l == Low - 1 && s == SwitchOn) discharge_empty -> POWER[Battery][s][l - 1]
		|	// when battery is empty, you can only power off or plug in
		when (b == Battery && l == Empty && s == SwitchOn) power_off -> POWER[Battery][SwitchOff][l]
		|	// when AC charger is pluged in, you can charge the battery
		when (b == AC && l < Full) charge -> POWER[AC][s][l + 1]
).


/** alarm system **/

// Alarm status
const AlarmActivated = 0    // Alarm currently active
const AlarmSilenced  = 1    // Alarm currently inactive
range AlarmStateT = AlarmActivated .. AlarmSilenced

// Alarm reason
const Pinched = 0		// line blocked
const Blocked = 1		// line pinched
const LowBattery = 2	// battery level is low
range AlarmReason = Pinched .. Blocked

// Line Alarm model
ALARM = (	// line pinched, go to alarm system
		flow_pinched -> ALARM_SYSTEM[AlarmActivated][Pinched]
		|	// line blocked, go to alarm system
		flow_blocked -> ALARM_SYSTEM[AlarmActivated][Blocked]
		| 	// power is off, alarm stop
		power_off -> ALARM
),

// alarm system, sound or slience alarm, or deal with problem
ALARM_SYSTEM[a: AlarmStateT][r: AlarmReason] = (
		when (a == AlarmActivated) silence_alarm -> ALARM_SYSTEM[AlarmSilenced][r]
		|
		when (a == AlarmActivated) sound_alarm -> ALARM_SYSTEM[a][r]
		// reason solved, ALARM_SYSTEM should down, trun back to ALARM
		| // flow blocked solved
		when (r == Blocked) flow_unblocked -> ALARM
		| // flow pinched solved
		when (r == Pinched) flow_unpinched -> ALARM
		| // power is off, alarm stop
		power_off -> ALARM
).

// Power Alarm model
POWER_ALARM = (	// battery low, go to power alarm system
		discharge_low -> POWER_ALARM_SYSTEM[AlarmActivated]
		| 	// battery get charged, alarm keep stop
		charge -> POWER_ALARM
		|	// power is off, alarm stop
		power_off -> POWER_ALARM
),

// power alarm system, sound or slience alarm, or deal with problem
POWER_ALARM_SYSTEM[a: AlarmStateT] = (
		when (a == AlarmActivated) silence_alarm -> POWER_ALARM_SYSTEM[AlarmSilenced]
		|
		when (a == AlarmActivated) sound_alarm -> POWER_ALARM_SYSTEM[a]
		| //low battery solved
		charge -> POWER_ALARM
		| // power is off, alarm stop
		power_off -> POWER_ALARM
).

/** user interface **/

// medicien amount
const EmptyMedicien = 0
const FullMedicien = 4  // just for convience, you can chenge it
range MedicienAmount = EmptyMedicien .. FullMedicien

// set the parameters
const ParamsNotSet = 2    // pump parameters not set yet
const ParamsSet    = 3    // pump parameters already set
range ParamsStateT = ParamsNotSet .. ParamsSet

// Locked/unlocked states of a line with respect to a pump channel
const LineUnlocked = 4  // line not locked into a pump channel 
const LineLocked   = 5  // line locked into a pump channel
range LineLockStateT = LineUnlocked .. LineLocked

// Locked/unlocked states of the pump unit
const UnitUnlocked = 6  // the keypad of the pump is not locked
const UnitLocked   = 7  // the keypad of the pump is locked
range UnitLockStateT = UnitUnlocked .. UnitLocked

// Whether the user interface is confirmed
const NotConfirmed = 0
const Confirmed = 1
range ConfirmStateT = NotConfirmed .. Confirmed

// User interface system
USERINTERFACE = (
	power_on -> SETUP[ParamsNotSet][LineUnlocked][UnitUnlocked][EmptyMedicien][NotConfirmed]
),

// start to setup
SETUP[params: ParamsStateT][lineLock: LineLockStateT][unitLock: UnitLockStateT][med: MedicienAmount][conf: ConfirmStateT] = 
(
    power_off -> USERINTERFACE
    | // set medicien amount
	when (med == EmptyMedicien) 
		set_rate -> enter_value[m: MedicienAmount] -> SETUP[params][lineLock][unitLock][m][conf]
	| // set params
    when (params == ParamsNotSet && med > EmptyMedicien)
        press_set -> SETUP[ParamsSet][lineLock][unitLock][med][conf]
    | // unset params
	when (params == ParamsNotSet && med > EmptyMedicien)
        press_cancel -> SETUP[ParamsNotSet][lineLock][unitLock][EmptyMedicien][conf]
    | //clear params
    when (params == ParamsSet && lineLock == LineUnlocked)
        clear_rate -> SETUP[ParamsNotSet][lineLock][unitLock][EmptyMedicien][conf]
    | // Prepare line and lock
    when (params == ParamsSet && lineLock == LineUnlocked)
        connect_set -> purge_air -> lock_line -> SETUP[params][LineLocked][unitLock][med][conf]
    | // Confirm settings
    when (lineLock == LineLocked && conf == NotConfirmed)
        confirm_settings -> SETUP[params][lineLock][unitLock][med][Confirmed]
    | // Unlock line
    when (lineLock == LineLocked && conf == NotConfirmed)
        erase_and_unlock_line -> SETUP[params][LineUnlocked][unitLock][med][conf]
	| // Change the settings
	when (conf == Confirmed && unitLock == UnitUnlocked)
		change_settings -> SETUP[params][lineLock][unitLock][med][conf]
	| // Lock the keypad
	when (conf == Confirmed && unitLock == UnitUnlocked)
		lock_unit -> SETUP[params][lineLock][UnitLocked][med][conf]
	| // Unlock the keypad
	when (conf == Confirmed && unitLock == UnitLocked)
		unlock_unit -> SETUP[params][lineLock][UnitUnlocked][med][conf]
//	| // If finish, wait for another dose
//	finish_setting -> USERINTERFACE
).



/** Individual Line **/
// if battery level is empty, dispense cannot happen

// Battery power volume
const LowVolume = 0		// Battery has low power
const HighVolume = 1 	// Battery has enough power
range Volume = LowVolume .. HighVolume

// line start up
LINE = L[EmptyMedicien][HighVolume],
L[med: MedicienAmount][vol: Volume] = (
		power_off -> L[med][vol]
		|	// nurse enters the medicine amount
		enter_value[m: MedicienAmount] -> L[m][vol]
		|	// battery power is empty, this will block the dispense
		discharge_empty -> L[med][LowVolume]
		|	// battery gets charged, unblock the dispense
		charge -> L[med][HighVolume]
		|	// start to dispense
		confirm_settings -> INFUSION[med][vol]
),

// Pump in infusion mode:
INFUSION[med: MedicienAmount][vol: Volume] =
(
    power_off -> LINE
    |
    change_settings -> LINE
    |	// battery get charged, unblock the dispense if blocked
	charge -> INFUSION[med][HighVolume]
	|	// battery power is empty, block the dispense
	when (vol > LowVolume)
		discharge_empty -> INFUSION[med][vol - 1]
	|	// flow blocked, ring the alarm
	when (med > EmptyMedicien && vol > LowVolume)
		flow_blocked -> BLOCKED[med][vol]
	|	// flow pinched, ring the alarm
	when (med > EmptyMedicien && vol > LowVolume)
		flow_pinched -> PINCHED[med][vol]
	|	// normal dispense
    when (med > EmptyMedicien && vol > LowVolume)
        dispense_main_med_flow -> INFUSION[med - 1][vol]
//    |
//    when (med > EmptyMedicien && vol == LowVolume)
//		what_to_do -> INFUSION[med][vol]
),

BLOCKED[med: MedicienAmount][vol: Volume] = (
	power_off -> LINE
	|	// flow unblocked
	flow_unblocked -> INFUSION[med][vol]
),

PINCHED[med: MedicienAmount][vol: Volume] = (
	power_off -> LINE
	|	// flow unpinched
	flow_unpinched -> INFUSION[med][vol]
).


/** Semaphores **/
// used to control the order of setting of 2 lines
// set rate will start the settings and another line can not setting now
// confirm settings will finsih setting, another line can start setting now

// semaphore value
const Max = 1
range ValueRange = 0..Max
SEMAPHORE = SEMA[1],
SEMA[v:ValueRange] = (
		when(v<Max){confirm_settings}->SEMA[v+1] // conditions to release
        |
		when(v>0) {set_rate}->SEMA[v-1] // conditions to acquire
		|
		power_off->SEMA[1] // restart semaphore after power_off
).


/** Pump **/
||PUMP = (
		lines[i:1..2]:LINE ||
		lines[i:1..2]:USERINTERFACE ||
		lines[i:1..2]:ALARM ||
		POWER_SYSTEM ||
		POWER_ALARM ||
		{lines[i:1..2]}::SEMAPHORE
)/{forall[i:1..2]{power_on/lines[i].power_on, power_off/lines[i].power_off, discharge_empty/lines[i].discharge_empty, charge/lines[i].charge}}.


/** Property 1 **/
// The pump cannot start pumping without the operator first confirming the settings on the pump
fluent START[i:1..2] = <{lines[i].dispense_main_med_flow}, {power_off}>
fluent CONFIRMED[i:1..2] = <{lines[i].confirm_settings}, {power_off}>
assert CONFIRM_THEN_START = forall[i:1..2] (!START[i] U CONFIRMED[i])

/** Porperty 2 **/
// Electrical power can fail infinitely often
fluent POWER_FAIL = <{discharge_empty}, {plug_in}>
assert FAIL_OFTEN = [](<>POWER_FAIL)

/** Porperty 3 **/
// If the backup battery power fails, pumping will not occur on any line.
assert  PUMP_NOT_OCCUR = forall[i:1..2] []!(lines[i].dispense_main_med_flow && POWER_FAIL)

/** Porperty 4 **/
// It is always possible to resume pumping after a failure.
fluent LINE_FAIL[i:1..2] = <{lines[i].flow_blocked, lines[i].flow_pinched, discharge_low}, {lines[i].flow_unblocked, lines[i].flow_unpinched, plug_in}>
assert RESUME = forall[i:1..2] [](LINE_FAIL[i] -> <>lines[i].dispense_main_med_flow)

/** Porperty 5 **/
// An alarm will sound on any line failure (blockage, pinching, empty ﬂuid, or whatever failures you model).
assert ALARM_ACTIVATE = forall[i:1..2] [](LINE_FAIL[i] -> <>(lines[i].sound_alarm || lines[i].slience_alarm || sound_alarm || slience_alarm))

/** Porperty 6 **/
// In the absence of errors the pump will continue to pump until the treatment is ﬁnished.
//assert KEEP_PUMP = forall[i:1..2] (!LINE_FAIL[i] -> <>) /**TODO**/

/** Porperty 7 **/
// Checked by deadlock checking

/** Porperty 8 **/
//

/** Porperty 9 **/
//



