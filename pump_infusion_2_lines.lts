/** power system **/

// Switch status
const SwitchOff = 0
const SwitchOn = 1
range SwitchStatus = SwitchOff .. SwitchOn

// Power mode
const Battery = 0
const AC = 1
range PowerMode = Battery .. AC

// Battery level
const Empty = 0
const Low = 1
const Full = 2    // just for convience, you can chenge it
range BatteryLevel = Empty .. Full

// Power system model
POWER_SYSTEM = POWER[Battery][SwitchOff][Full],
POWER[b: PowerMode][s: SwitchStatus][l: BatteryLevel] = (
		when (s == SwitchOff && l > Empty) power_on -> POWER[b][SwitchOn][l]
		|
		when (s == SwitchOn) power_off -> POWER[b][SwitchOff][l]
		|
		when (b == Battery) plug_in -> POWER[AC][s][l]
		|
		when (b == AC) plug_out -> POWER[Battery][s][l]
		|
		when (b == Battery && l > Low && s == SwitchOn) discharge -> POWER[Battery][s][l - 1]
		|
		when (b == Battery && l <= Low && l > Empty && s == SwitchOn) discharge_low -> POWER[Battery][s][l - 1]
		|
		when (b == Battery && l == Empty && s == SwitchOn) power_off -> POWER[Battery][SwitchOff][l]
		|
		when (b == AC && l < Full) charge -> POWER[AC][s][l + 1]
).


//property POWERCHECK = BATTERYLEVEL[Battery][Switch_off][Full],
//BATTERYLEVEL[b: Power_mode][s: Switch_status][l: Battery_level] = (
//		when (b == Battery && s == Switch_off && l == Empty) plug_in -> BATTERYLEVEL[AC][s][l]
//		|
//		when ()
//).

//||CHECK_POWER = (POWER_SYSTEM || POWERCHECK).



/** alarm system **/

// Alarm status
const AlarmActivated = 0    // Alarm currently active
const AlarmSilenced  = 1    // Alarm currently inactive
range AlarmStateT = AlarmActivated .. AlarmSilenced

// Alarm reason
const Pinched = 0
const Blocked = 1
const LowBattery = 2
range AlarmReason = Pinched .. Blocked

// Alarm model
ALARM = (
		flow_pinched ->sound_alarm -> ALARM_SYSTEM[AlarmActivated][Pinched]
		|
		flow_blocked -> sound_alarm -> ALARM_SYSTEM[AlarmActivated][Blocked]
//		|
//		discharge_low ->sound_alarm -> ALARM_SYSTEM[AlarmActivated][LowBattery]
		| // power is off, alarm stop
		power_off -> ALARM
),

ALARM_SYSTEM[a: AlarmStateT][r: AlarmReason] = (
		when (a == AlarmActivated) silence_alarm -> ALARM_SYSTEM[AlarmSilenced][r]
		|
		when (a == AlarmActivated) sound_alarm -> ALARM_SYSTEM[a][r]
		// reason solved, ALARM_SYSTEM should down, trun back to ALARM
		| // flow blocked solved
		when (r == Blocked) flow_unblocked -> ALARM
		| // flow pinched solved
		when (r == Pinched) flow_unpinched -> ALARM
		| // power is off, alarm stop
		power_off -> ALARM
).

POWER_ALARM = (
		discharge_low ->sound_alarm -> POWER_ALARM_SYSTEM[AlarmActivated]
		| // power is off, alarm stop
		power_off -> POWER_ALARM
),

POWER_ALARM_SYSTEM[a: AlarmStateT] = (
		when (a == AlarmActivated) silence_alarm -> POWER_ALARM_SYSTEM[AlarmSilenced]
		|
		when (a == AlarmActivated) sound_alarm -> POWER_ALARM_SYSTEM[a]
		| //low battery solved
		charge -> POWER_ALARM
		| // power is off, alarm stop
		power_off -> POWER_ALARM
).

/** user interface **/

// medicien amount
const EmptyMedicien = 0
const FullMedicien = 4  // just for convience, you can chenge it
range MedicienAmount = EmptyMedicien .. FullMedicien

// set the parameters
const ParamsNotSet = 2    // pump parameters not set yet
const ParamsSet    = 3    // pump parameters already set
range ParamsStateT = ParamsNotSet .. ParamsSet

// Locked/unlocked states of a line with respect to a pump channel
const LineUnlocked = 4  // line not locked into a pump channel 
const LineLocked   = 5  // line locked into a pump channel
range LineLockStateT = LineUnlocked .. LineLocked

// Locked/unlocked states of the pump unit
const UnitUnlocked = 6  // the keypad of the pump is not locked
const UnitLocked   = 7  // the keypad of the pump is locked
range UnitLockStateT = UnitUnlocked .. UnitLocked

// Whether the user interface is confirmed
const NotConfirmed = 0
const Confirmed = 1
range ConfirmStateT = NotConfirmed .. Confirmed

// User interface system
USERINTERFACE = (
	power_on -> SETUP[ParamsNotSet][LineUnlocked][UnitUnlocked][EmptyMedicien][NotConfirmed]
),

SETUP[params: ParamsStateT][lineLock: LineLockStateT][unitLock: UnitLockStateT][med: MedicienAmount][conf: ConfirmStateT] = 
(
    power_off -> USERINTERFACE
    | // set medicien amount
	when (med == EmptyMedicien) 
		set_rate -> enter_value[m: MedicienAmount] -> SETUP[params][lineLock][unitLock][m][conf]
	| // set params
    when (params == ParamsNotSet && med > EmptyMedicien)// && lineLock == LineUnlocked)   
        press_set -> SETUP[ParamsSet][lineLock][unitLock][med][conf]
    | // unset params
	when (params == ParamsNotSet && med > EmptyMedicien)// && lineLock == LineUnlocked)  
        press_cancel -> SETUP[ParamsNotSet][lineLock][unitLock][EmptyMedicien][conf]
    | //clear params
    when (params == ParamsSet && lineLock == LineUnlocked)
        clear_rate -> SETUP[ParamsNotSet][lineLock][unitLock][EmptyMedicien][conf]
    | // Prepare line and lock
    when (params == ParamsSet && lineLock == LineUnlocked)
        connect_set -> purge_air -> lock_line -> SETUP[params][LineLocked][unitLock][med][conf]
    | // Confirm settings
    when (lineLock == LineLocked && conf == NotConfirmed)
        confirm_settings -> SETUP[params][lineLock][unitLock][med][Confirmed]//INFUSION[UnitUnlocked]
    | // Unlock line
    when (lineLock == LineLocked && conf == NotConfirmed)
        erase_and_unlock_line -> SETUP[params][LineUnlocked][unitLock][med][conf]
	| // Change the settings
	when (conf == Confirmed && unitLock == UnitUnlocked)
		change_settings -> SETUP[params][lineLock][unitLock][med][conf]
	| // Lock the keypad
	when (conf == Confirmed && unitLock == UnitUnlocked)
		lock_unit -> SETUP[params][lineLock][UnitLocked][med][conf]
	| // Unlock the keypad
	when (conf == Confirmed && unitLock == UnitLocked)
		unlock_unit -> SETUP[params][lineLock][UnitUnlocked][med][conf]
//	| // If finish, wait for another dose
//	finish_setting -> USERINTERFACE
).



/** lines **/

// medicien volume
const LowVolume = 0
const HighVolume = 1 // For convenience
range Volume = LowVolume .. HighVolume

LINE = L[EmptyMedicien],
L[med: MedicienAmount] = (
		power_off -> L[med]
		|
		enter_value[m: MedicienAmount] -> L[m]
		|
		confirm_settings -> INFUSION[med]//[HighVolume]
),

// Pump in infusion mode:
INFUSION[med: MedicienAmount]=//[vol: Volume] =
(
    power_off -> LINE
    |
    change_settings -> LINE
    |
	when (med > EmptyMedicien)//&& vol > LowVolume)
		flow_blocked -> BLOCKED[med]//[vol]
	|
	when (med > EmptyMedicien)// && vol > LowVolume)
		flow_pinched -> PINCHED[med]//[vol]
	|
    when (med > EmptyMedicien)// && vol > LowVolume)
        dispense_main_med_flow -> INFUSION[med - 1]//[vol - 1]
//    |
//    when (med > EmptyMedicien && vol == LowVolume)
//		what_to_do -> INFUSION[med][vol]
),

BLOCKED[med: MedicienAmount]=(//[vol: Volume] = (
	power_off -> LINE
	|
	flow_unblocked -> INFUSION[med]//[vol]
),

PINCHED[med: MedicienAmount]=(//[vol: Volume] = (
	power_off -> LINE
	|
	flow_unpinched -> INFUSION[med]//[vol]
).


/** Semaphore **/
const Max = 1
range ValueRange = 0..Max
SEMAPHORE = SEMA[1], // the N is num of semaphore, it is 1 in default
SEMA[v:ValueRange] = (
		when(v<Max){confirm_settings}->SEMA[v+1] // conditions to release
        |
		when(v>0) {set_rate}->SEMA[v-1] // conditions to acquire
		|
		power_off->SEMA[1] // restart semaphore after power_off
).


/** Pump **/
||PUMP = (
		lines[i:1..2]:LINE ||
		lines[i:1..2]:USERINTERFACE ||
		lines[i:1..2]:ALARM ||
		POWER_SYSTEM ||
		POWER_ALARM ||
		{lines[i:1..2]}::SEMAPHORE
)/{forall[i:1..2]{power_on/lines[i].power_on, power_off/lines[i].power_off}}.//, discharge_low/lines[i].discharge_low, charge/lines[i].charge}}.









