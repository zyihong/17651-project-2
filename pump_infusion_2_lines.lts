/** power system **/

// Switch status
const Switch_off = 0
const Switch_on = 1
range Switch_status = Switch_off .. Switch_on

// Power mode
const Battery = 0
const AC = 1
range Power_mode = Battery .. AC

// Power model
POWER_SYSTEM = POWER[Battery][Switch_off],
POWER[b: Power_mode][s: Switch_status] = (
		when (s == Switch_off) power_on -> POWER[b][Switch_on]
		|
		when (s == Switch_on) power_off -> POWER[b][Switch_off]
		|
		when (b == Battery) plug_in -> POWER[AC][s]
		|
		when (b == AC) plug_out -> POWER[Battery][s]
).



// lines



/** alarm system **/

// Alarm status
const Alarm_slience = 0
const Alarm_ring = 1
range Alarm_status = Alarm_slience .. Alarm_ring

// Alarm reason
const ReasonA = 0
const ReasonB = 1
const ReasonC = 2
range Alarm_reason = ReasonA .. ReasonC

// Alarm model
ALARM = (
		// what caused the alarm to ring for reasonA?

		// what caused the alarm to ring for reasonB?

		// what caused the alarm to ring for reasonC?

		// power is off, alarm stop
		power_off -> ALARM
),

ALARM_SYSTEM[a: Alarm_status][r: Alarm_reason] = (
		when (a == Alarm_ring) slience_alarm -> ALARM_SYSTEM[Alarm_slience][r]
		|
		when (a == Alarm_ring) keep_ring -> ALARM_SYSTEM[a][r]
		// reason solved, ALARM_SYSTEM should down, trun back to ALARM
		| // power is off, alarm stop
		power_off -> ALARM
).



/** user interface **/




